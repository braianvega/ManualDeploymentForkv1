// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Entities;

namespace Repository.Migrations
{
    [DbContext(typeof(ManualDeploymentContext))]
    [Migration("20240205141725__p17")]
    partial class _p17
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Repository.Entities.Applicative", b =>
                {
                    b.Property<int>("ApplicativeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameApplicative")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicativeID");

                    b.ToTable("Applicative");
                });

            modelBuilder.Entity("Repository.Entities.Blueprint", b =>
                {
                    b.Property<int>("BlueprintID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicativeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("Version")
                        .HasColumnType("real");

                    b.HasKey("BlueprintID");

                    b.HasIndex("ApplicativeID");

                    b.ToTable("Blueprint");
                });

            modelBuilder.Entity("Repository.Entities.Change", b =>
                {
                    b.Property<int>("ChangeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeDescription")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangeNumber")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CheckList")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeploymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnvironmentID")
                        .HasColumnType("int");

                    b.Property<int>("IsTemplate")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("TypologyID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("ChangeID");

                    b.HasIndex("EnvironmentID");

                    b.HasIndex("RequestTypeID");

                    b.HasIndex("TypologyID");

                    b.HasIndex("UserID");

                    b.ToTable("Change");
                });

            modelBuilder.Entity("Repository.Entities.ChangeApplicative", b =>
                {
                    b.Property<int>("ChangeApplicativeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicativeID")
                        .HasColumnType("int");

                    b.Property<int>("ChangeID")
                        .HasColumnType("int");

                    b.HasKey("ChangeApplicativeID");

                    b.HasIndex("ApplicativeID");

                    b.HasIndex("ChangeID");

                    b.ToTable("ChangeAplicative");
                });

            modelBuilder.Entity("Repository.Entities.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangesChangeID")
                        .HasColumnType("int");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ContactID");

                    b.HasIndex("ChangeID");

                    b.HasIndex("ChangesChangeID");

                    b.HasIndex("UserID");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Repository.Entities.Environment", b =>
                {
                    b.Property<int>("EnvironmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameEnvironment")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnvironmentID");

                    b.ToTable("Environment");
                });

            modelBuilder.Entity("Repository.Entities.FunctionalUser", b =>
                {
                    b.Property<int>("FunctionalUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangesChangeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataStartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FunctionalUserID");

                    b.HasIndex("ChangeID");

                    b.HasIndex("ChangesChangeID");

                    b.HasIndex("UserID");

                    b.ToTable("FunctionalUser");
                });

            modelBuilder.Entity("Repository.Entities.Plan", b =>
                {
                    b.Property<int>("PlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangesChangeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExecutionTime")
                        .HasColumnType("int");

                    b.Property<int>("ResponsibleAreaID")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("PlanID");

                    b.HasIndex("ChangeID");

                    b.HasIndex("ChangesChangeID");

                    b.HasIndex("ResponsibleAreaID");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("Repository.Entities.Postimplantation", b =>
                {
                    b.Property<int>("PostimplantationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangesChangeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PostimplantationID");

                    b.HasIndex("ChangeID");

                    b.HasIndex("ChangesChangeID");

                    b.HasIndex("UserID");

                    b.ToTable("Postimplantation");
                });

            modelBuilder.Entity("Repository.Entities.Prerequisite", b =>
                {
                    b.Property<int>("PrerequisiteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangesChangeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExecutionTime")
                        .HasColumnType("int");

                    b.Property<int>("ResponsibleAreaID")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PrerequisiteID");

                    b.HasIndex("ChangeID");

                    b.HasIndex("ChangesChangeID");

                    b.HasIndex("ResponsibleAreaID");

                    b.HasIndex("UserID");

                    b.ToTable("Prerequisite");
                });

            modelBuilder.Entity("Repository.Entities.Profile", b =>
                {
                    b.Property<int>("ProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfileID");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Repository.Entities.ProfileUser", b =>
                {
                    b.Property<int>("ProfileUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProfileID")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ProfileUserID");

                    b.HasIndex("ProfileID");

                    b.HasIndex("UserID");

                    b.ToTable("ProfileUser");
                });

            modelBuilder.Entity("Repository.Entities.RequestType", b =>
                {
                    b.Property<int>("RequestTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestTypeID");

                    b.ToTable("RequestType");
                });

            modelBuilder.Entity("Repository.Entities.ResponsibleArea", b =>
                {
                    b.Property<int>("ResponsibleAreaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsibleName")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResponsibleAreaID");

                    b.ToTable("ResponsibleArea");
                });

            modelBuilder.Entity("Repository.Entities.Result", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Approved")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChangeID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangesChangeID")
                        .HasColumnType("int");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reprobate")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultID");

                    b.HasIndex("ChangeID");

                    b.HasIndex("ChangesChangeID");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("Repository.Entities.RollbackPlan", b =>
                {
                    b.Property<int>("RollbackPlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanID")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("RollbackPlanID");

                    b.HasIndex("PlanID");

                    b.ToTable("RollbackPlan");
                });

            modelBuilder.Entity("Repository.Entities.RollbackPre", b =>
                {
                    b.Property<int>("RollbackPreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrerequisiteID")
                        .HasColumnType("int");

                    b.Property<int?>("PrerrequisitoID")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("RollbackPreID");

                    b.HasIndex("PrerrequisitoID");

                    b.ToTable("Rollbackpre");
                });

            modelBuilder.Entity("Repository.Entities.Server", b =>
                {
                    b.Property<int>("ServerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EnvironmentID")
                        .HasColumnType("int");

                    b.Property<string>("NameServer")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServerID");

                    b.HasIndex("EnvironmentID");

                    b.ToTable("Server");
                });

            modelBuilder.Entity("Repository.Entities.Signature", b =>
                {
                    b.Property<int>("SignatureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangesChangeID")
                        .HasColumnType("int");

                    b.Property<string>("EmailName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observatins")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainedUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("SignatureID");

                    b.HasIndex("ChangeID");

                    b.HasIndex("ChangesChangeID");

                    b.HasIndex("UserID");

                    b.ToTable("Signature");
                });

            modelBuilder.Entity("Repository.Entities.Training", b =>
                {
                    b.Property<int>("TrainingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeID")
                        .HasColumnType("int");

                    b.Property<int?>("ChangesChangeID")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataTraining")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issues")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("TrainingID");

                    b.HasIndex("ChangeID");

                    b.HasIndex("ChangesChangeID");

                    b.HasIndex("TypeID");

                    b.HasIndex("UserID");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("Repository.Entities.Type", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeID");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("Repository.Entities.Typology", b =>
                {
                    b.Property<int>("TypologyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypologyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypologyID");

                    b.ToTable("Typology");
                });

            modelBuilder.Entity("Repository.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NetworkUser")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Repository.Entities.Blueprint", b =>
                {
                    b.HasOne("Repository.Entities.Applicative", "Applicative")
                        .WithMany()
                        .HasForeignKey("ApplicativeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicative");
                });

            modelBuilder.Entity("Repository.Entities.Change", b =>
                {
                    b.HasOne("Repository.Entities.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Typology", "Typology")
                        .WithMany()
                        .HasForeignKey("TypologyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Environment");

                    b.Navigation("RequestType");

                    b.Navigation("Typology");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.ChangeApplicative", b =>
                {
                    b.HasOne("Repository.Entities.Applicative", "Applicative")
                        .WithMany()
                        .HasForeignKey("ApplicativeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Change", "Change")
                        .WithMany()
                        .HasForeignKey("ChangeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicative");

                    b.Navigation("Change");
                });

            modelBuilder.Entity("Repository.Entities.Contact", b =>
                {
                    b.HasOne("Repository.Entities.Change", "Change")
                        .WithMany()
                        .HasForeignKey("ChangeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Change", "Changes")
                        .WithMany("Contacts")
                        .HasForeignKey("ChangesChangeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Change");

                    b.Navigation("Changes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.FunctionalUser", b =>
                {
                    b.HasOne("Repository.Entities.Change", "Change")
                        .WithMany()
                        .HasForeignKey("ChangeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Change", "Changes")
                        .WithMany("FunctionalUsers")
                        .HasForeignKey("ChangesChangeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Change");

                    b.Navigation("Changes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Plan", b =>
                {
                    b.HasOne("Repository.Entities.Change", "Change")
                        .WithMany()
                        .HasForeignKey("ChangeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Change", "Changes")
                        .WithMany("Plans")
                        .HasForeignKey("ChangesChangeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Entities.ResponsibleArea", "ResponsibleArea")
                        .WithMany()
                        .HasForeignKey("ResponsibleAreaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Change");

                    b.Navigation("Changes");

                    b.Navigation("ResponsibleArea");
                });

            modelBuilder.Entity("Repository.Entities.Postimplantation", b =>
                {
                    b.HasOne("Repository.Entities.Change", "Change")
                        .WithMany()
                        .HasForeignKey("ChangeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Change", "Changes")
                        .WithMany("Postimplantations")
                        .HasForeignKey("ChangesChangeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Change");

                    b.Navigation("Changes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Prerequisite", b =>
                {
                    b.HasOne("Repository.Entities.Change", "Change")
                        .WithMany()
                        .HasForeignKey("ChangeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Change", "Changes")
                        .WithMany("Prerequisites")
                        .HasForeignKey("ChangesChangeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Entities.ResponsibleArea", "ResponsibleArea")
                        .WithMany()
                        .HasForeignKey("ResponsibleAreaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Change");

                    b.Navigation("Changes");

                    b.Navigation("ResponsibleArea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.ProfileUser", b =>
                {
                    b.HasOne("Repository.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Result", b =>
                {
                    b.HasOne("Repository.Entities.Change", "Change")
                        .WithMany()
                        .HasForeignKey("ChangeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Change", "Changes")
                        .WithMany("Results")
                        .HasForeignKey("ChangesChangeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Change");

                    b.Navigation("Changes");
                });

            modelBuilder.Entity("Repository.Entities.RollbackPlan", b =>
                {
                    b.HasOne("Repository.Entities.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Repository.Entities.RollbackPre", b =>
                {
                    b.HasOne("Repository.Entities.Prerequisite", "Prerequisite")
                        .WithMany()
                        .HasForeignKey("PrerrequisitoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Prerequisite");
                });

            modelBuilder.Entity("Repository.Entities.Server", b =>
                {
                    b.HasOne("Repository.Entities.Environment", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Environment");
                });

            modelBuilder.Entity("Repository.Entities.Signature", b =>
                {
                    b.HasOne("Repository.Entities.Change", "Change")
                        .WithMany()
                        .HasForeignKey("ChangeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Change", "Changes")
                        .WithMany("Signatures")
                        .HasForeignKey("ChangesChangeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Change");

                    b.Navigation("Changes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Training", b =>
                {
                    b.HasOne("Repository.Entities.Change", "Change")
                        .WithMany()
                        .HasForeignKey("ChangeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Change", "Changes")
                        .WithMany("Trainings")
                        .HasForeignKey("ChangesChangeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Entities.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Change");

                    b.Navigation("Changes");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Change", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("FunctionalUsers");

                    b.Navigation("Plans");

                    b.Navigation("Postimplantations");

                    b.Navigation("Prerequisites");

                    b.Navigation("Results");

                    b.Navigation("Signatures");

                    b.Navigation("Trainings");
                });
#pragma warning restore 612, 618
        }
    }
}
